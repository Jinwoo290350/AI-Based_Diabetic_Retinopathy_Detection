import streamlit as st
from PIL import Image
import numpy as np
from tensorflow.keras.models import load_model
from openai import OpenAI
import os
import time

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="EYE Care Pro",
    layout="wide",
    page_icon="üëÅÔ∏è",
    initial_sidebar_state="expanded"
)

# ‡∏™‡πÑ‡∏ï‡∏•‡πå CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI
st.markdown("""
<style>
    .main {
        background-color: #F8F9FA;
        padding: 20px;
    }
    .header {
        color: #2E86C1;
        font-size: 2.5em;
        text-align: center;
        padding: 20px;
        border-bottom: 3px solid #2E86C1;
        margin-bottom: 30px;
    }
    .diagnosis-box {
        background: white;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin-top: 20px;
    }
    .image-preview {
        border: 2px solid #AED6F1;
        border-radius: 10px;
        padding: 10px;
        background: white;
    }
    .stButton>button {
        background: #3498DB !important;
        color: white !important;
        transition: all 0.3s;
    }
    .stButton>button:hover {
        background: #2980B9 !important;
        transform: scale(1.05);
    }
</style>
""", unsafe_allow_html=True)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI
try:
    model = load_model('CEDT_Model.h5', compile=False, safe_mode=False)
    TARGET_SIZE = model.input_shape[1:3]  # ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
except Exception as e:
    st.error(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ: {str(e)}")
    st.stop()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Deepseek API
DEEPSEEK_CONFIG = {
    "api_key": os.getenv("DEEPSEEK_API_KEY"),  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variable
    "base_url": "https://api.deepseek.com/v1"
}

client = OpenAI(**DEEPSEEK_CONFIG)

def preprocess_image(image):
    """‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
    try:
        if image.mode != 'RGB':
            image = image.convert('RGB')
        img = image.resize(TARGET_SIZE, Image.Resampling.LANCZOS)
        return np.expand_dims(np.array(img)/255.0, axis=0)
    except Exception as e:
        st.error(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û: {str(e)}")
        return None

def generate_advice(level):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏î‡πâ‡∏ß‡∏¢ Deepseek API"""
    prompt_template = f"""
    ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏à‡∏±‡∏Å‡∏©‡∏∏‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÇ‡∏£‡∏Ñ‡∏à‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡∏ï‡∏≤‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö {level}
    ‡πÇ‡∏î‡∏¢‡πÅ‡∏ö‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
    1. ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏ö
    2. ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
    3. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥
    4. ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    5. ‡∏Ç‡πâ‡∏≠‡∏´‡πâ‡∏≤‡∏°
    6. ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏±‡∏ß
    """
    
    try:
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏à‡∏±‡∏Å‡∏©‡∏∏‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤"},
                {"role": "user", "content": prompt_template}
            ],
            temperature=0.3,
            max_tokens=600,
            top_p=0.95
        )
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {str(e)}")
        return None

# ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• UI
st.markdown('<div class="header">üëÅÔ∏è EYE Care Pro - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡∏ï‡∏≤‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô</div>', unsafe_allow_html=True)

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏†‡∏≤‡∏û
input_method = st.radio(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:",
    ["üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û", "üì∑ ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û", "üñºÔ∏è ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"],
    horizontal=True
)

image_source = None

# ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏´‡∏•‡πà‡∏á‡∏†‡∏≤‡∏û
if input_method == "üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û":
    uploaded_file = st.file_uploader(" ", type=["jpg", "jpeg", "png"])
    if uploaded_file:
        image_source = Image.open(uploaded_file)

elif input_method == "üì∑ ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û":
    camera_img = st.camera_input("‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ï‡∏≤")
    if camera_img:
        image_source = Image.open(camera_img)

elif input_method == "üñºÔ∏è ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á":
    sample_folder = "sample_images"
    if os.path.exists(sample_folder):
        samples = [f for f in os.listdir(sample_folder) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
        if samples:
            selected = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", samples)
            if selected:
                image_source = Image.open(os.path.join(sample_folder, selected))
        else:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå")

# ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û
if image_source:
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.markdown('<div class="image-preview">', unsafe_allow_html=True)
        st.image(image_source, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        if st.button("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", type="primary"):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
                try:
                    processed_img = preprocess_image(image_source)
                    if processed_img is not None:
                        prediction = model.predict(processed_img)
                        diagnosis_level = np.argmax(prediction[0])
                        
                        advice = generate_advice(diagnosis_level)
                        
                        if advice:
                            st.session_state.diagnosis = {
                                "image": image_source,
                                "level": diagnosis_level,
                                "advice": advice
                            }
                            st.rerun()
                            
                except Exception as e:
                    st.error(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

    with col2:
        if 'diagnosis' in st.session_state:
            diagnosis = st.session_state.diagnosis
            formatted_advice = diagnosis['advice'].replace('\n', '<br>')
            
            st.markdown(f"""
            <div class="diagnosis-box">
                <h3>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢: ‡∏£‡∏∞‡∏î‡∏±‡∏ö {diagnosis['level']}</h3>
                <div style="margin-top:20px; line-height:1.6">
                    {formatted_advice}
                </div>
            </div>
            """, unsafe_allow_html=True)

# ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°
with st.sidebar:
    st.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    
    with st.expander("‚ö° ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"):
        st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", 0.1, 1.0, 0.8, key="model_precision")
        st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", 0.0, 1.0, 0.5, key="creativity")
    
    with st.expander("üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à"):
        if 'diagnosis' in st.session_state:
            st.image(st.session_state.diagnosis['image'], use_container_width=True)
            st.write(f"‡∏£‡∏∞‡∏î‡∏±‡∏ö: {st.session_state.diagnosis['level']}")
            st.write(st.session_state.diagnosis['advice'])

st.sidebar.markdown("""
<div style="color:#666; margin-top:50px">
    <small>
    ‚ÑπÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô<br>
    ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡∏° EYE Care - ¬© 2025
    </small>
</div>
""", unsafe_allow_html=True)