import streamlit as st
from PIL import Image
import numpy as np
from tensorflow.keras.models import load_model
from openai import OpenAI
import os

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
st.set_page_config(page_title="EYE Care", layout="wide", page_icon="üëÅÔ∏è")

# Custom CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á UI
st.markdown("""
<style>
    .header-style { font-size:35px !important; color:#2E86C1 !important; padding-bottom:20px; }
    .subheader-style { font-size:25px !important; color:#148F77 !important; }
    .success-box { background-color:#E8F8F5; padding:20px; border-radius:10px; margin:10px 0; }
    .warning-box { background-color:#FDEBD0; padding:20px; border-radius:10px; margin:10px 0; }
    .image-container { border:2px solid #AED6F1; border-radius:10px; padding:10px; }
</style>
""", unsafe_allow_html=True)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• classification
try:
    model = load_model('CEDT_Model.h5', compile=False, safe_mode=False)
    model_input_shape = model.input_shape[1:3]
except Exception as e:
    st.error(f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {str(e)}")
    st.stop()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OpenAI Client
client = OpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
    base_url="https://api.opentyphoon.ai/v1",
)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û
def preprocess_image(image):
    target_size = model_input_shape or (320, 320)
    img = image.resize(target_size)
    img_array = np.array(img) / 255.0
    return np.expand_dims(img_array, axis=0)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å OpenAI
def generate_advice(user_eye, temperature, top_p):
    stream = client.chat.completions.create(
        model="typhoon-v1.5x-70b-instruct",
        messages=[
            {
                "role": "system",
                "content": """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏ï‡∏≤‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á 0-4:
- 0: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£
- 1: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£
- 2: ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
- 3: ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á
- 4: ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å
‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡πÜ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£"""
            },
            {"role": "user", "content": str(user_eye)}
        ],
        max_tokens=512,
        temperature=temperature,
        top_p=top_p,
        stream=True,
    )
    
    response = []
    for chunk in stream:
        if chunk.choices[0].delta.content:
            response.append(chunk.choices[0].delta.content)
    return ''.join(response)

# ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
st.markdown('<p class="header-style">üëÅÔ∏è EYE Care - Diabetic Retinopathy Detection</p>', unsafe_allow_html=True)

# ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Input ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ó‡πá‡∏ö
input_method = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", 
                       ["‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û", "‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"], 
                       horizontal=True,
                       label_visibility="collapsed")

image_source = None

if input_method == "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û":
    uploaded_file = st.file_uploader("‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", 
                                    type=["jpg", "jpeg", "png"],
                                    help="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå JPG, PNG, JPEG ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 200MB")
    if uploaded_file:
        image_source = Image.open(uploaded_file)

elif input_method == "‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á":
    sample_folder = "sample_images"
    if os.path.exists(sample_folder):
        sample_images = [f for f in os.listdir(sample_folder) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
        if sample_images:
            cols = st.columns(3)
            for idx, img_file in enumerate(sample_images):
                with cols[idx % 3]:
                    image_path = os.path.join(sample_folder, img_file)
                    img = Image.open(image_path)
                    if st.button(f"‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á {idx+1}"):
                        image_source = img
                        st.session_state.selected_sample = img_file
            if 'selected_sample' in st.session_state:
                st.markdown(f'<div class="success-box">‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {st.session_state.selected_sample}</div>', unsafe_allow_html=True)
        else:
            st.markdown('<div class="warning-box">‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå sample_images</div>', unsafe_allow_html=True)
    else:
        st.markdown('<div class="warning-box">‚ö†Ô∏è ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå sample_images ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</div>', unsafe_allow_html=True)

# ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
if image_source:
    with st.container():
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.markdown('<p class="subheader-style">‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>', unsafe_allow_html=True)
            st.markdown('<div class="image-container">', unsafe_allow_html=True)
            st.image(image_source, use_column_width=True)
            st.markdown('</div>', unsafe_allow_html=True)
            
            if st.button("üè• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û", type="primary", use_container_width=True):
                with st.spinner("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û..."):
                    try:
                        processed_img = preprocess_image(image_source)
                        prediction = model.predict(processed_img)
                        user_eye = np.argmax(prediction[0])
                        
                        advice = generate_advice(user_eye, 
                                                st.session_state.get('temperature', 0.6), 
                                                st.session_state.get('top_p', 0.95))
                        
                        st.session_state.diagnosis_history.append({
                            "image": image_source,
                            "level": user_eye,
                            "advice": advice
                        })
                        st.success("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
                    except Exception as e:
                        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

        with col2:
            if st.session_state.get('diagnosis_history'):
                latest = st.session_state.diagnosis_history[-1]
                st.markdown(f'<p class="subheader-style">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢ (‡∏£‡∏∞‡∏î‡∏±‡∏ö {latest["level"]})</p>', unsafe_allow_html=True)
                st.markdown(f'<div class="success-box">{latest["advice"]}</div>', unsafe_allow_html=True)

# ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Sidebar
with st.sidebar:
    st.markdown('<p class="header-style">‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</p>', unsafe_allow_html=True)
    
    # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•
    with st.expander("üß† ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•"):
        model_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏°‡πÄ‡∏î‡∏•", ["‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô", "‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"])
        
    # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI
    with st.expander("ü§ñ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI"):
        st.session_state.temperature = st.slider("Temperature", 0.0, 1.0, 0.6)
        st.session_state.top_p = st.slider("Top P", 0.0, 1.0, 0.95)
        st.session_state.max_tokens = st.slider("Max Token", 50, 512, 512)
    
    # ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢
    with st.expander("üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"):
        if 'diagnosis_history' not in st.session_state:
            st.session_state.diagnosis_history = []
            
        for idx, record in enumerate(st.session_state.diagnosis_history):
            st.write(f"üìå ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå #{idx+1} (‡∏£‡∏∞‡∏î‡∏±‡∏ö {record['level']})")
            st.image(record["image"], width=100)
            if st.button(f"‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î #{idx+1}"):
                st.write(record["advice"])

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û
if model_input_shape:
    st.markdown(f'<div class="warning-box">‚ö†Ô∏è ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î {model_input_shape[0]}x{model_input_shape[1]} ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•</div>', unsafe_allow_html=True)