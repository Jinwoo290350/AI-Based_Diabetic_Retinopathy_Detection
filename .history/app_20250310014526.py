import streamlit as st
from PIL import Image
import numpy as np
from tensorflow.keras.models import load_model
from openai import OpenAI
import os
import time

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
st.set_page_config(page_title="EYE Care", layout="wide", page_icon="üëÅÔ∏è")

# Custom CSS
st.markdown("""
<style>
    .header-style { 
        font-size:35px !important; 
        color: #2980B9 !important;
        padding-bottom:20px;
    }
    .diagnosis-box {
        background-color: #E8F8F5;
        padding: 20px;
        border-radius: 10px;
        margin-top: 20px;
    }
    .image-preview {
        border: 2px solid #AED6F1;
        border-radius: 10px;
        padding: 10px;
    }
</style>
""", unsafe_allow_html=True)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
try:
    model = load_model('CEDT_Model.h5', compile=False, safe_mode=False)
    model_input_shape = model.input_shape[1:3]
except Exception as e:
    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {str(e)}")
    st.stop()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OpenAI
client = OpenAI(
    api_key=os.getenv(""),
    base_url="https://api.opentyphoon.ai/v1",
)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û
def preprocess_image(image):
    target_size = model_input_shape or (320, 320)
    if image.mode != 'RGB':
        image = image.convert('RGB')
    img = image.resize(target_size, Image.Resampling.LANCZOS)
    img_array = np.array(img) / 255.0
    return np.expand_dims(img_array, axis=0)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
def generate_advice(user_eye):
    try:
        stream = client.chat.completions.create(
            model="typhoon-v1.5x-70b-instruct",
            messages=[{
                "role": "system",
                "content": """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏ï‡∏≤‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á 0-4"""
            }, {
                "role": "user", 
                "content": str(user_eye)
            }],
            max_tokens=512,
            temperature=st.session_state.temperature,
            top_p=st.session_state.top_p,
            stream=True,
        )
        
        response = []
        for chunk in stream:
            if chunk.choices[0].delta.content:
                response.append(chunk.choices[0].delta.content)
        return ''.join(response)
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {str(e)}")
        return None

# ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
st.markdown('<p class="header-style">üëÅÔ∏è EYE Care - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡∏ï‡∏≤‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô</p>', unsafe_allow_html=True)

# ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
input_method = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", 
                       ["‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û", "‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"], 
                       horizontal=True,
                       key="input_method")

# ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏û
image_source = None
if input_method == "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û":
    uploaded_file = st.file_uploader(" ", type=["jpg", "jpeg", "png"], key="uploader")
    if uploaded_file:
        image_source = Image.open(uploaded_file)

elif input_method == "‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á":
    sample_folder = "sample_images"
    if os.path.exists(sample_folder):
        sample_images = [f for f in os.listdir(sample_folder) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
        if sample_images:
            selected_sample = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", sample_images)
            if selected_sample:
                image_path = os.path.join(sample_folder, selected_sample)
                image_source = Image.open(image_path)
        else:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå")

# ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
if image_source:
    with st.container():
        col1, col2 = st.columns([1, 2])
        
        # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢ - ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°
        with col1:
            st.markdown('<div class="image-preview">', unsafe_allow_html=True)
            st.image(image_source, use_container_width=True)
            st.markdown('</div>', unsafe_allow_html=True)
            
            if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", type="primary"):
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):
                    try:
                        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û
                        processed_img = preprocess_image(image_source)
                        prediction = model.predict(processed_img)
                        user_eye = np.argmax(prediction[0])
                        
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                        advice = generate_advice(user_eye)
                        
                        if advice:
                            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                            if 'diagnosis_history' not in st.session_state:
                                st.session_state.diagnosis_history = []
                                
                            st.session_state.diagnosis_history.append({
                                "image": image_source,
                                "level": user_eye,
                                "advice": advice
                            })
                            
                            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                            st.rerun()
                            
                    except Exception as e:
                        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

        # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤ - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        with col2:
            if 'diagnosis_history' in st.session_state and st.session_state.diagnosis_history:
                latest = st.session_state.diagnosis_history[-1]
                st.markdown(f'<div class="diagnosis-box">'
                            f'<h3>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢ (‡∏£‡∏∞‡∏î‡∏±‡∏ö {latest["level"]})</h3>'
                            f'{latest["advice"]}'
                            f'</div>', unsafe_allow_html=True)

# ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô sidebar
with st.sidebar:
    st.header("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    
    with st.expander("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI"):
        st.session_state.temperature = st.slider("Temperature", 0.0, 1.0, 0.6)
        st.session_state.top_p = st.slider("Top P", 0.0, 1.0, 0.95)
        st.session_state.max_tokens = st.slider("Max Tokens", 50, 512, 512)

    with st.expander("‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"):
        if 'diagnosis_history' in st.session_state and st.session_state.diagnosis_history:
            for idx, record in enumerate(st.session_state.diagnosis_history):
                st.subheader(f"‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå #{idx+1}")
                st.image(record["image"], use_container_width=True)
                st.write(f"‡∏£‡∏∞‡∏î‡∏±‡∏ö: {record['level']}")
                st.write(record["advice"])
                st.divider()

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û
if model_input_shape:
    st.info(f"‚ö†Ô∏è ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î {model_input_shape[0]}x{model_input_shape[1]} ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•")